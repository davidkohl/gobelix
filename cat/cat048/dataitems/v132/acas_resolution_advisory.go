// dataitems/cat048/acas_resolution_advisory.go
package v132

import (
	"bytes"
	"encoding/hex"
	"fmt"
)

// ACASResolutionAdvisory implements I048/260
// Currently active Resolution Advisory (RA), if any, generated by the ACAS associated
// with the transponder transmitting the report and threat identity data.
type ACASResolutionAdvisory struct {
	Data []byte // Raw 56-bit ACAS RA data
}

// Decode implements the DataItem interface
func (a *ACASResolutionAdvisory) Decode(buf *bytes.Buffer) (int, error) {
	data := make([]byte, 7) // 56 bits = 7 bytes
	n, err := buf.Read(data)
	if err != nil {
		return n, fmt.Errorf("reading ACAS resolution advisory: %w", err)
	}
	if n != 7 {
		return n, fmt.Errorf("insufficient data for ACAS resolution advisory: got %d bytes, want 7", n)
	}

	a.Data = make([]byte, 7)
	copy(a.Data, data)

	return n, nil
}

// Encode implements the DataItem interface
func (a *ACASResolutionAdvisory) Encode(buf *bytes.Buffer) (int, error) {
	if err := a.Validate(); err != nil {
		return 0, err
	}

	n, err := buf.Write(a.Data)
	if err != nil {
		return n, fmt.Errorf("writing ACAS resolution advisory: %w", err)
	}
	return n, nil
}

// Validate implements the DataItem interface
func (a *ACASResolutionAdvisory) Validate() error {
	if a.Data == nil || len(a.Data) != 7 {
		return fmt.Errorf("ACAS resolution advisory data must be 7 bytes (56 bits)")
	}
	return nil
}

// String returns a human-readable representation
func (a *ACASResolutionAdvisory) String() string {
	// ACAS RA messages are complex and their detailed interpretation
	// is defined in ICAO Annex 10 and other standards.
	// Here we just provide the basic hexadecimal representation.
	return fmt.Sprintf("RA: %s", hex.EncodeToString(a.Data))
}

// IsActive returns true if the RA contains an active resolution advisory
func (a *ACASResolutionAdvisory) IsActive() bool {
	// Check if the RA Active bit is set (bit 54, byte index 0, bit 2)
	// Refer to ICAO Annex 10 for the exact bit position
	if a.Data == nil || len(a.Data) != 7 {
		return false
	}
	return (a.Data[0] & 0x04) != 0
}

// FromBDS30 sets the ACAS RA from BDS 3,0 register data
func (a *ACASResolutionAdvisory) FromBDS30(bds30 []byte) error {
	if bds30 == nil || len(bds30) != 7 {
		return fmt.Errorf("BDS 3,0 data must be 7 bytes (56 bits)")
	}

	a.Data = make([]byte, 7)
	copy(a.Data, bds30)

	return nil
}
