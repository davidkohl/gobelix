// cat/cat020/dataitems/v10/acas_resolution_advisory.go
package v10

import (
	"bytes"
	"fmt"

	"github.com/davidkohl/gobelix/asterix"
)

// ACASResolutionAdvisory represents I020/260 - ACAS Resolution Advisory Report
// Fixed length: 7 bytes
// Currently active Resolution Advisory (RA), if any, generated by the ACAS
// associated with the transponder transmitting the report and threat identity data
type ACASResolutionAdvisory struct {
	MBData [7]byte // 56-bit message conveying Mode S Comm B message data of BDS Register 3,0
}

// NewACASResolutionAdvisory creates a new ACAS Resolution Advisory data item
func NewACASResolutionAdvisory() *ACASResolutionAdvisory {
	return &ACASResolutionAdvisory{}
}

// Decode decodes the ACAS Resolution Advisory from bytes
func (a *ACASResolutionAdvisory) Decode(buf *bytes.Buffer) (int, error) {
	if buf.Len() < 7 {
		return 0, fmt.Errorf("%w: need 7 bytes, have %d", asterix.ErrBufferTooShort, buf.Len())
	}

	data := buf.Next(7)
	copy(a.MBData[:], data)

	return 7, nil
}

// Encode encodes the ACAS Resolution Advisory to bytes
func (a *ACASResolutionAdvisory) Encode(buf *bytes.Buffer) (int, error) {
	if err := a.Validate(); err != nil {
		return 0, err
	}

	n, err := buf.Write(a.MBData[:])
	if err != nil {
		return n, fmt.Errorf("writing ACAS RA data: %w", err)
	}

	return 7, nil
}

// Validate validates the ACAS Resolution Advisory
func (a *ACASResolutionAdvisory) Validate() error {
	// No specific validation needed - all 56-bit values are valid
	return nil
}

// String returns a string representation
func (a *ACASResolutionAdvisory) String() string {
	return fmt.Sprintf("BDS 3,0: %02X%02X%02X%02X%02X%02X%02X",
		a.MBData[0], a.MBData[1], a.MBData[2], a.MBData[3],
		a.MBData[4], a.MBData[5], a.MBData[6])
}
